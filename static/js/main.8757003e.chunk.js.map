{"version":3,"sources":["types.ts","context/sidebar-context.tsx","context/theme-context.tsx","redux/actions/country.ts","components/Favorite/FavoriteRow/index.tsx","components/UI/Modal/index.tsx","components/Favorite/FavoriteModal/index.tsx","redux/actions/modal.ts","components/Header/index.tsx","components/Sidebar/index.tsx","components/Form/index.tsx","pages/Home/index.tsx","components/CountryCard/index.tsx","pages/CountryDetail/index.tsx","Routes.tsx","App.tsx","serviceWorker.ts","redux/reducers/country.ts","redux/reducers/modal.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["Theme","SortBased","SortOrder","SidebarContext","createContext","showSidebar","toggleSidebar","SidebarProvider","children","useState","setShowSidebar","Provider","value","prevState","ThemeContext","theme","Blue","changeTheme","ThemeProvider","setTheme","newTheme","getCountrySuccess","data","type","payload","addFavoriteCountry","countryName","removeFavoriteCountry","FavoriteRow","country","dispatch","useDispatch","useContext","className","to","commonName","favorite","onClick","Backdrop","onClose","aria-hidden","onKeyDown","ModalOverlay","Modal","FavoriteModal","favoriteCountries","useSelector","state","closeHandler","map","key","Header","length","Sidebar","Red","Green","Purple","Form","input","inputHandler","inputRef","onSubmit","event","preventDefault","placeholder","onChange","ref","Home","setInput","Name","sortBased","setSortBased","Ascending","sortOrder","setSortOrder","useRef","allCountries","isLoading","error","useEffect","current","focus","changeSortType","based","Descending","sortDisplay","useCallback","useMemo","clonedAllCountries","flag","capital","region","population","toLocaleString","sort","a","b","localeCompare","Capital","Region","Number","replace","reverse","filter","startsWith","toUpperCase","substring","toLowerCase","columns","accessor","Cell","row","alt","values","src","Population","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","target","headerGroup","getHeaderGroupProps","headers","column","id","headerId","getHeaderProps","scope","render","getRowProps","cells","cell","getCellProps","CountryCard","capitals","arrIterate","arr","text","forEach","item","detail","officialName","languages","undefined","languagesArr","Object","entries","push","languagesTextConvert","borders","bordersTextConvert","CountryDetail","name","useParams","thisCountry","find","Routes","exact","path","component","App","showModal","modal","axios","get","res","isAxiosError","errorMsg","message","Boolean","window","location","hostname","match","action","common","official","flags","png","clonedFavCountries","addedCountry","createRootReducer","combineReducers","initState","store","initialState","middlewares","thunk","composeEnhancers","compose","createStore","applyMiddleware","makeStore","WithProvider","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8757003e.chunk.js","sourcesContent":["import { AxiosError } from 'axios'\n\n// Action types\nexport const GET_COUNTRY_REQUEST = 'GET_COUNTRY'\nexport const GET_COUNTRY_SUCCESS = 'GET_COUNTRY_SUCCESS'\nexport const GET_COUNTRY_FAILURE = 'GET_COUNTRY_FAILURE'\nexport const ADD_FAVORITE_COUNTRY = 'ADD_FAVORITE_COUNTRY'\nexport const REMOVE_FAVORITE_COUNTRY = 'REMOVE_FAVORITE_COUNTRY'\nexport const TOGGLE_MODAL = 'TOGGLE_MODAL'\n\n// Enum\nexport enum Theme {\n  Red = 'red',\n  Blue = 'blue',\n  Green = 'green',\n  Purple = 'purple',\n}\n\nexport enum SortBased {\n  Name = 'name',\n  Capital = 'capital',\n  Region = 'region',\n  Population = 'population',\n}\n\nexport enum SortOrder {\n  Ascending = 'ascending',\n  Descending = 'descending',\n}\n\n// A modal\nexport type ModalAction = {\n  type: typeof TOGGLE_MODAL\n}\n\n// A country\nexport type Country = {\n  commonName: string\n  officialName: string\n  capital: string[]\n  flag: string\n  population: number\n  languages: object\n  borders: string[]\n  region: string\n  favorite: boolean\n}\n\nexport type GetCountryRequestAction = {\n  type: typeof GET_COUNTRY_REQUEST\n}\n\nexport type GetCountrySuccessAction = {\n  type: typeof GET_COUNTRY_SUCCESS\n  payload: {\n    data: any[]\n  }\n}\n\nexport type GetCountryFailureAction = {\n  type: typeof GET_COUNTRY_FAILURE\n  payload: {\n    errorMsg: string\n  }\n}\n\nexport type AddFavoriteCountryAction = {\n  type: typeof ADD_FAVORITE_COUNTRY\n  payload: {\n    countryName: string\n  }\n}\n\nexport type RemoveFavoriteCountryAction = {\n  type: typeof REMOVE_FAVORITE_COUNTRY\n  payload: {\n    countryName: string\n  }\n}\n\n// For reducer\nexport type ModalState = {\n  showModal: boolean\n}\n\nexport type CountryState = {\n  isLoading: boolean\n  error: string\n  allCountries: Country[]\n  favoriteCountries: Country[]\n}\n\nexport type CountryActions =\n  | GetCountryRequestAction\n  | GetCountrySuccessAction\n  | GetCountryFailureAction\n  | AddFavoriteCountryAction\n  | RemoveFavoriteCountryAction\n\nexport type AppState = {\n  country: CountryState\n  modal: ModalState\n}\n\n// Type guard\nexport function isAxiosError(candidate: any): candidate is AxiosError {\n  return candidate.isAxiosError === true\n}\n\n// Props\nexport type CountryProps = {\n  country: Country\n}\n","import React, { useState, createContext } from 'react'\n\ntype SidebarContextType = {\n  showSidebar: boolean\n  toggleSidebar: () => void\n}\n\nexport const SidebarContext = createContext<SidebarContextType>({\n  showSidebar: false,\n  toggleSidebar: () => {},\n})\n\nconst SidebarProvider: React.FC<React.ReactNode> = ({ children }) => {\n  const [showSidebar, setShowSidebar] = useState(false)\n\n  const toggleSidebar = () => {\n    setShowSidebar((prevState) => !prevState)\n  }\n\n  return (\n    <SidebarContext.Provider value={{ showSidebar, toggleSidebar }}>\n      {children}\n    </SidebarContext.Provider>\n  )\n}\n\nexport default SidebarProvider\n","import React, { useState, createContext } from 'react'\n\nimport { Theme } from '../types'\n\ntype ThemeContextType = {\n  theme: Theme\n  changeTheme: (newTheme: Theme) => void\n}\n\nexport const ThemeContext = createContext<ThemeContextType>({\n  theme: Theme.Blue,\n  changeTheme: () => {},\n})\n\nconst ThemeProvider: React.FC<React.ReactNode> = ({ children }) => {\n  const [theme, setTheme] = useState<Theme>(Theme.Blue)\n\n  const changeTheme = (newTheme: Theme) => {\n    setTheme(newTheme)\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, changeTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport default ThemeProvider\n","import { Dispatch } from 'redux'\nimport axios from 'axios'\n\nimport {\n  GET_COUNTRY_REQUEST,\n  GET_COUNTRY_SUCCESS,\n  GET_COUNTRY_FAILURE,\n  CountryActions,\n  isAxiosError,\n  ADD_FAVORITE_COUNTRY,\n  REMOVE_FAVORITE_COUNTRY,\n} from '../../types'\n\nexport function getCountryRequest(): CountryActions {\n  return {\n    type: GET_COUNTRY_REQUEST,\n  }\n}\n\nexport function getCountrySuccess(data: any[]): CountryActions {\n  return {\n    type: GET_COUNTRY_SUCCESS,\n    payload: {\n      data,\n    },\n  }\n}\n\nexport function getCountryFailure(errorMsg: string): CountryActions {\n  return {\n    type: GET_COUNTRY_FAILURE,\n    payload: {\n      errorMsg,\n    },\n  }\n}\n\nexport function addFavoriteCountry(countryName: string): CountryActions {\n  return {\n    type: ADD_FAVORITE_COUNTRY,\n    payload: {\n      countryName,\n    },\n  }\n}\n\nexport function removeFavoriteCountry(countryName: string): CountryActions {\n  return {\n    type: REMOVE_FAVORITE_COUNTRY,\n    payload: {\n      countryName,\n    },\n  }\n}\n\nexport function fetchCountry() {\n  return async (dispatch: Dispatch) => {\n    dispatch(getCountryRequest())\n    try {\n      const res = await axios.get('https://restcountries.com/v3.1/all')\n      const data = await res.data\n      return dispatch(getCountrySuccess(data))\n    } catch (err) {\n      if (isAxiosError(err)) {\n        return dispatch(getCountryFailure(err.message))\n      }\n    }\n  }\n}\n","import React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport { MdFavorite, MdOutlineFavoriteBorder } from 'react-icons/md'\n\nimport {\n  addFavoriteCountry,\n  removeFavoriteCountry,\n} from '../../../redux/actions'\nimport { CountryProps } from '../../../types'\nimport { ThemeContext } from '../../../context/theme-context'\nimport './favoriteRow.scss'\n\nconst FavoriteRow = ({ country }: CountryProps) => {\n  const dispatch = useDispatch()\n\n  const { theme } = useContext(ThemeContext)\n\n  return (\n    <div className={`favorite-row favorite-row-${theme}`}>\n      <Link\n        className=\"favorite-row__link\"\n        to={`/country/${country.commonName}`}\n      >\n        {country.commonName}\n      </Link>\n      {country.favorite ? (\n        <MdFavorite\n          className=\"icon favorite-row__icon\"\n          onClick={() => dispatch(removeFavoriteCountry(country.commonName))}\n        />\n      ) : (\n        <MdOutlineFavoriteBorder\n          className=\"icon favorite-row__icon\"\n          onClick={() => dispatch(addFavoriteCountry(country.commonName))}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default FavoriteRow\n","import React, { FC } from 'react'\n\nimport './modal.scss'\n\nexport type BackdropProps = {\n  onClose: () => void\n}\n\nconst Backdrop = ({ onClose }: BackdropProps) => {\n  return (\n    <div\n      className=\"backdrop\"\n      aria-hidden=\"true\"\n      onClick={onClose}\n      onKeyDown={onClose}\n    />\n  )\n}\n\nconst ModalOverlay: FC = ({ children }) => {\n  return (\n    <div className=\"modal\">\n      <div className=\"content\">{children}</div>\n    </div>\n  )\n}\n\nconst Modal: FC<BackdropProps> = ({ onClose, children }) => {\n  return (\n    <>\n      <Backdrop onClose={onClose} />\n      <ModalOverlay>{children}</ModalOverlay>\n    </>\n  )\n}\n\nexport default Modal\n","import React, { useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { IoIosCloseCircleOutline } from 'react-icons/io'\n\nimport FavoriteRow from '../FavoriteRow'\nimport Modal from '../../UI/Modal'\nimport { ThemeContext } from '../../../context/theme-context'\nimport { toggleModal } from '../../../redux/actions'\nimport { AppState } from '../../../types'\nimport './favoriteModal.scss'\n\nconst FavoriteModal = () => {\n  const dispatch = useDispatch()\n\n  const { theme } = useContext(ThemeContext)\n\n  const { favoriteCountries } = useSelector((state: AppState) => state.country)\n\n  const closeHandler = () => {\n    dispatch(toggleModal())\n  }\n\n  return (\n    <Modal onClose={closeHandler}>\n      <div className={`modal__header modal__header-${theme}`}>\n        <h2>Favorite List</h2>\n        <IoIosCloseCircleOutline\n          className=\"icon modal__close\"\n          onClick={closeHandler}\n        />\n      </div>\n      {favoriteCountries.map((country) => (\n        <FavoriteRow key={country.commonName} country={country} />\n      ))}\n    </Modal>\n  )\n}\n\nexport default FavoriteModal\n","import { TOGGLE_MODAL, ModalAction } from '../../types'\n\nexport function toggleModal(): ModalAction {\n  return {\n    type: TOGGLE_MODAL,\n  }\n}\n","import React, { useContext } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { NavLink } from 'react-router-dom'\nimport { MdOutlineFavoriteBorder } from 'react-icons/md'\nimport { GiHamburgerMenu } from 'react-icons/gi'\n\nimport { SidebarContext } from '../../context/sidebar-context'\nimport { ThemeContext } from '../../context/theme-context'\nimport { AppState } from '../../types'\nimport { toggleModal } from '../../redux/actions'\nimport './header.scss'\n\nconst Header = () => {\n  const dispatch = useDispatch()\n\n  const { showSidebar, toggleSidebar } = useContext(SidebarContext)\n  const { theme } = useContext(ThemeContext)\n\n  const { favoriteCountries } = useSelector((state: AppState) => state.country)\n\n  const openModal = () => {\n    dispatch(toggleModal())\n  }\n\n  return (\n    <header>\n      <nav className={`nav ${showSidebar ? 'nav-push' : ''} nav-${theme}`}>\n        <button className=\"nav__hamburger\" onClick={toggleSidebar}>\n          <GiHamburgerMenu className=\"icon nav__hamburger-icon\" />\n        </button>\n\n        <button className=\"nav__logo\">\n          <NavLink className=\"nav__link\" to={`/`}>\n            Country API\n          </NavLink>\n        </button>\n\n        <button className=\"nav__favorite\">\n          <span className=\"icon nav__favorite-icon\">\n            <MdOutlineFavoriteBorder onClick={openModal} />\n          </span>\n          <span className=\"nav__favorite-badge\">\n            {favoriteCountries.length}\n          </span>\n        </button>\n      </nav>\n    </header>\n  )\n}\n\nexport default Header\n","import React, { useContext } from 'react'\nimport { IoColorPaletteSharp } from 'react-icons/io5'\n\nimport { SidebarContext } from '../../context/sidebar-context'\nimport { ThemeContext } from '../../context/theme-context'\nimport { Theme } from '../../types'\nimport './sidebar.scss'\n\nconst Sidebar = () => {\n  const { showSidebar } = useContext(SidebarContext)\n  const { changeTheme } = useContext(ThemeContext)\n\n  return (\n    <div className={`sidebar ${showSidebar ? 'sidebar-show' : ''}`}>\n      <p className=\"sidebar__title\">Theme</p>\n      <ul className=\"sidebar__themes\">\n        <li>\n          <button\n            className=\"theme theme-red\"\n            onClick={() => changeTheme(Theme.Red)}\n          >\n            <span className=\"theme__text\">Red</span>\n            <IoColorPaletteSharp className=\"theme__icon\" />\n          </button>\n        </li>\n        <li>\n          <button\n            className=\"theme theme-blue\"\n            onClick={() => changeTheme(Theme.Blue)}\n          >\n            <span className=\"theme__text\">Blue</span>\n            <IoColorPaletteSharp className=\"theme__icon\" />\n          </button>\n        </li>\n        <li>\n          <button\n            className=\"theme theme-green\"\n            onClick={() => changeTheme(Theme.Green)}\n          >\n            <span className=\"theme__text\">Green</span>\n            <IoColorPaletteSharp className=\"theme__icon\" />\n          </button>\n        </li>\n        <li>\n          <button\n            className=\"theme theme-purple\"\n            onClick={() => changeTheme(Theme.Purple)}\n          >\n            <span className=\"theme__text\">Purple</span>\n            <IoColorPaletteSharp className=\"theme__icon\" />\n          </button>\n        </li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Sidebar\n","import React, { useContext } from 'react'\n\nimport { ThemeContext } from '../../context/theme-context'\nimport './form.scss'\n\nexport type FormProps = {\n  input: string\n  inputHandler: (event: React.ChangeEvent<HTMLInputElement>) => void\n  inputRef: React.RefObject<HTMLInputElement>\n}\n\nconst Form = ({ input, inputHandler, inputRef }: FormProps) => {\n  const { theme } = useContext(ThemeContext)\n\n  const submitHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n  }\n\n  return (\n    <form className=\"form\" onSubmit={submitHandler}>\n      <input\n        className={`form__input form__input-${theme}`}\n        type=\"text\"\n        placeholder=\"Enter a country name...\"\n        value={input}\n        onChange={inputHandler}\n        ref={inputRef}\n      ></input>\n    </form>\n  )\n}\n\nexport default Form\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  useCallback,\n} from 'react'\nimport { Link } from 'react-router-dom'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { useTable, Column } from 'react-table'\nimport { FaGlobeAmericas } from 'react-icons/fa'\nimport { AiOutlineArrowDown, AiOutlineArrowUp } from 'react-icons/ai'\nimport { MdFavorite, MdOutlineFavoriteBorder } from 'react-icons/md'\n\nimport Form from '../../components/Form'\nimport { SidebarContext } from '../../context/sidebar-context'\nimport { ThemeContext } from '../../context/theme-context'\nimport { addFavoriteCountry, removeFavoriteCountry } from '../../redux/actions'\nimport { AppState, SortBased, SortOrder } from '../../types'\nimport './home.scss'\n\ntype Cols = {\n  flag: string\n  commonName: string\n  capital: string\n  region: string\n  population: string\n  favorite: boolean\n}\n\nexport default function Home() {\n  const dispatch = useDispatch()\n\n  const [input, setInput] = useState('')\n  const [sortBased, setSortBased] = useState<SortBased>(SortBased.Name)\n  const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.Ascending)\n\n  const inputRef = useRef<HTMLInputElement>(null) // For focus the first time\n\n  const { showSidebar } = useContext(SidebarContext)\n  const { theme } = useContext(ThemeContext)\n\n  const { allCountries, isLoading, error } = useSelector(\n    (state: AppState) => state.country\n  )\n\n  useEffect(() => {\n    inputRef.current?.focus()\n  }, [])\n\n  const inputHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(event.target.value)\n  }\n  // For sorting\n  const changeSortType = (based: SortBased) => {\n    if (sortBased === based) {\n      if (sortOrder === SortOrder.Ascending) {\n        setSortOrder(SortOrder.Descending)\n      } else {\n        setSortOrder(SortOrder.Ascending)\n      }\n    } else {\n      setSortBased(based)\n    }\n  }\n\n  const sortDisplay = useCallback(\n    (based: SortBased) => {\n      if (sortBased === based) {\n        if (sortOrder === SortOrder.Ascending) {\n          return <AiOutlineArrowDown className=\"icon icon-sort\" />\n        } else {\n          return <AiOutlineArrowUp className=\"icon icon-sort\" />\n        }\n      } else {\n        return <></>\n      }\n    },\n    [sortBased, sortOrder]\n  )\n\n  const headerOnClickHandler = (headerId: string) => {\n    if (headerId === 'commonName') {\n      changeSortType(SortBased.Name)\n    } else if (headerId === 'capital') {\n      changeSortType(SortBased.Capital)\n    } else if (headerId === 'region') {\n      changeSortType(SortBased.Region)\n    } else if (headerId === 'population') {\n      changeSortType(SortBased.Population)\n    }\n  }\n\n  // For react-table\n  const data = useMemo((): Cols[] => {\n    let clonedAllCountries = allCountries.map((country) => ({\n      flag: country.flag,\n      commonName: country.commonName,\n      capital: country.capital[0],\n      region: country.region,\n      population: country.population.toLocaleString('en-us'),\n      favorite: country.favorite,\n    }))\n\n    if (sortBased === SortBased.Name) {\n      clonedAllCountries.sort((a: Cols, b: Cols) =>\n        a.commonName.localeCompare(b.commonName)\n      )\n    } else if (sortBased === SortBased.Capital) {\n      clonedAllCountries.sort((a: Cols, b: Cols) =>\n        a.capital?.localeCompare(b.capital)\n      )\n    } else if (sortBased === SortBased.Region) {\n      clonedAllCountries.sort((a: Cols, b: Cols) =>\n        a.region.localeCompare(b.region)\n      )\n    } else {\n      clonedAllCountries.sort((a: Cols, b: Cols) => {\n        return (\n          Number(b.population.replace(/\\D/g, '')) -\n          Number(a.population.replace(/\\D/g, ''))\n        )\n      })\n    }\n\n    if (sortOrder === SortOrder.Descending) {\n      clonedAllCountries.reverse()\n    }\n\n    if (input.length > 0) {\n      return clonedAllCountries.filter((country: Cols) =>\n        country.commonName.startsWith(\n          input[0].toUpperCase() + input.substring(1).toLowerCase()\n        )\n      )\n    } else {\n      return clonedAllCountries\n    }\n  }, [input, allCountries, sortOrder, sortBased])\n\n  const columns: Column<Cols>[] = useMemo(\n    () => [\n      {\n        Header: 'Flag',\n        accessor: 'flag',\n        Cell: ({ row, value }) => (\n          <img\n            className=\"country-row__img\"\n            alt={`${row.values.commonName} img`}\n            src={value}\n          />\n        ),\n      },\n      {\n        Header: <>Name {sortDisplay(SortBased.Name)}</>,\n        accessor: 'commonName',\n        Cell: ({ value }) => (\n          <Link className=\"country-row__link\" to={`/country/${value}`}>\n            {value}\n          </Link>\n        ),\n      },\n      {\n        Header: <>Capital {sortDisplay(SortBased.Capital)}</>,\n        accessor: 'capital',\n      },\n      {\n        Header: <>Region {sortDisplay(SortBased.Region)}</>,\n        accessor: 'region',\n      },\n      {\n        Header: <>Population {sortDisplay(SortBased.Population)}</>,\n        accessor: 'population',\n      },\n      {\n        Header: 'Favorite',\n        accessor: 'favorite',\n        Cell: ({ row, value }) => (\n          <>\n            {value ? (\n              <MdFavorite\n                className={`icon country-row__icon country-row__icon-${theme}`}\n                onClick={() => {\n                  dispatch(removeFavoriteCountry(row.values.commonName))\n                }}\n              />\n            ) : (\n              <MdOutlineFavoriteBorder\n                className={`icon country-row__icon country-row__icon-${theme}`}\n                onClick={() => {\n                  dispatch(addFavoriteCountry(row.values.commonName))\n                }}\n              />\n            )}\n          </>\n        ),\n      },\n    ],\n    [sortDisplay, dispatch, theme]\n  )\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable<Cols>({ columns, data })\n\n  return (\n    <div className={`home ${showSidebar ? 'home-push' : ''}`}>\n      <FaGlobeAmericas className=\"icon home__globe\" />\n      <h1 className={`home__title home__title-${theme}`}>Country API</h1>\n      <Form input={input} inputHandler={inputHandler} inputRef={inputRef} />\n      {isLoading && (\n        <p className={`home__loading home__loading-${theme}`}>Loading ...</p>\n      )}\n      {error && <p className={`home__error home__error-${theme}`}>{error}</p>}\n      {!isLoading && !error && (\n        <div className=\"home__table\">\n          <table {...getTableProps()}>\n            <thead>\n              {headerGroups.map((headerGroup) => (\n                <tr {...headerGroup.getHeaderGroupProps()}>\n                  {headerGroup.headers.map((column) => {\n                    return (\n                      <th\n                        className={`table__header-${column.id}`}\n                        onClick={() => headerOnClickHandler(column.id)}\n                        {...column.getHeaderProps()}\n                        scope=\"col\"\n                      >\n                        {column.render('Header')}\n                      </th>\n                    )\n                  })}\n                </tr>\n              ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n              {rows.map((row) => {\n                prepareRow(row)\n                return (\n                  <tr {...row.getRowProps()}>\n                    {row.cells.map((cell) => {\n                      return (\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { MdFavorite, MdOutlineFavoriteBorder } from 'react-icons/md'\n\nimport { addFavoriteCountry, removeFavoriteCountry } from '../../redux/actions'\nimport { CountryProps } from '../../types'\nimport './countryCard.scss'\n\nconst CountryCard = ({ country }: CountryProps) => {\n  const dispatch = useDispatch()\n\n  const arrIterate = (arr: string[]) => {\n    let text = ''\n    arr.forEach((item) => {\n      if (item === arr[0]) {\n        text += item\n      } else if (item !== arr[arr.length - 1]) {\n        text += ', ' + item\n      } else {\n        text += ', and ' + item\n      }\n    })\n    return text\n  }\n\n  const languagesTextConvert = (languages: object) => {\n    if (languages === undefined) {\n      return 'Languages used in this country data is currently unavailable'\n    }\n\n    let languagesArr: string[] = []\n\n    for (const [, value] of Object.entries(languages)) {\n      languagesArr.push(value)\n    }\n\n    let content = ''\n\n    if (languagesArr.length === 0) {\n      content = 'No language is used in this country'\n    } else if (languagesArr.length === 1) {\n      content = `Language used in ${country.commonName} is ${languagesArr[0]}`\n    } else if (languagesArr.length === 2) {\n      content = `Languages used in ${country.commonName} are ${languagesArr[0]} and ${languagesArr[1]}`\n    } else {\n      content = `Languages used in ${country.commonName} are ${arrIterate(\n        languagesArr\n      )}`\n    }\n\n    return content\n  }\n\n  const bordersTextConvert = (borders: string[]) => {\n    if (borders === undefined) {\n      return \"This country's borders data is currently unavailable\"\n    }\n\n    let content = ''\n\n    if (borders.length === 0) {\n      content = 'There is no country adjacent to this country'\n    } else if (borders.length === 1) {\n      content = `Border country is ${borders[0]}`\n    } else if (borders.length === 2) {\n      content = `Border countries are ${borders[0]} and ${borders[1]}`\n    } else {\n      content = `Border countries are ${arrIterate(borders)}`\n    }\n\n    return content\n  }\n\n  const capitalsTextConvert = (capitals: string[]) => {\n    let content = ''\n\n    if (capitals.length === 0) {\n      content = 'N/A'\n    } else if (capitals.length === 1) {\n      content = capitals[0]\n    } else if (capitals.length === 2) {\n      content = `${capitals[0]} and ${capitals[1]}`\n    } else {\n      content = arrIterate(capitals)\n    }\n\n    return content\n  }\n\n  const detail = `The official name is ${country.officialName}. It is located in\n\t${country.region} and has population of\n\t${country.population.toLocaleString('en-us')}. \n  ${languagesTextConvert(country.languages)}. \n\t${bordersTextConvert(country.borders)}.`\n\n  return (\n    <div className=\"country-card\">\n      <div className=\"country-card__head-container\">\n        <p className=\"country-card__common-name\">{country.commonName}</p>\n        <div className=\"country-card__favorite\">\n          {country.favorite ? (\n            <MdFavorite\n              className=\"icon country-card__icon\"\n              onClick={() =>\n                dispatch(removeFavoriteCountry(country.commonName))\n              }\n            />\n          ) : (\n            <MdOutlineFavoriteBorder\n              className=\"icon country-card__icon\"\n              onClick={() => dispatch(addFavoriteCountry(country.commonName))}\n            />\n          )}\n        </div>\n      </div>\n      <p className=\"country-card__capital\">\n        {capitalsTextConvert(country.capital)}\n      </p>\n      <img\n        className=\"country-card__img\"\n        alt={`${country.commonName} img`}\n        src={country.flag}\n      />\n      <p className=\"country-card__detail\">{detail}</p>\n    </div>\n  )\n}\n\nexport default CountryCard\n","import React, { useContext } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport CountryCard from '../../components/CountryCard'\nimport { SidebarContext } from '../../context/sidebar-context'\nimport { ThemeContext } from '../../context/theme-context'\nimport { AppState } from '../../types'\nimport './countryDetail.scss'\n\nconst CountryDetail = () => {\n  const { name } = useParams<{ name?: string }>()\n\n  const { showSidebar } = useContext(SidebarContext)\n  const { theme } = useContext(ThemeContext)\n\n  const { allCountries, isLoading, error } = useSelector(\n    (state: AppState) => state.country\n  )\n\n  const thisCountry = allCountries.find(\n    (country) => country.commonName === name\n  )\n\n  return (\n    <div\n      className={`country-detail country-detail-${theme} ${\n        showSidebar ? 'country-detail-push' : ''\n      }`}\n    >\n      {isLoading && <p className={`country-detail__loading`}>Loading ...</p>}\n      {error && <p className={`country-detail__error`}>{error}</p>}\n      {!isLoading && !error && !thisCountry && (\n        <p className={`country-detail__error`}>No Country Found!!!</p>\n      )}\n      {!isLoading && !error && thisCountry && (\n        <CountryCard country={thisCountry} />\n      )}\n    </div>\n  )\n}\n\nexport default CountryDetail\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Home from './pages/Home'\nimport CountryDetail from './pages/CountryDetail'\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route exact path=\"/country/:name\" component={CountryDetail} />\n  </Switch>\n)\n\nexport default Routes\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport SidebarProvider from './context/sidebar-context'\nimport ThemeProvider from './context/theme-context'\nimport FavoriteModal from './components/Favorite/FavoriteModal'\nimport Header from './components/Header'\nimport Sidebar from './components/Sidebar'\nimport Routes from './Routes'\nimport { fetchCountry } from './redux/actions'\nimport { AppState } from './types'\n\nexport default function App() {\n  const dispatch = useDispatch()\n\n  const { showModal } = useSelector((state: AppState) => state.modal)\n\n  useEffect(() => {\n    dispatch(fetchCountry())\n  }, [dispatch])\n\n  return (\n    <SidebarProvider>\n      <ThemeProvider>\n        {showModal && <FavoriteModal />}\n        <Header />\n        <main>\n          <Sidebar />\n          <Routes />\n        </main>\n      </ThemeProvider>\n    </SidebarProvider>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CountryState,\n  CountryActions,\n  GET_COUNTRY_REQUEST,\n  GET_COUNTRY_SUCCESS,\n  GET_COUNTRY_FAILURE,\n  ADD_FAVORITE_COUNTRY,\n  REMOVE_FAVORITE_COUNTRY,\n} from '../../types'\n\nexport default function country(\n  state: CountryState = {\n    isLoading: true,\n    error: '',\n    allCountries: [],\n    favoriteCountries: [],\n  },\n  action: CountryActions\n): CountryState {\n  switch (action.type) {\n    case GET_COUNTRY_REQUEST: {\n      return {\n        ...state,\n        isLoading: true,\n        error: '',\n      }\n    }\n    case GET_COUNTRY_SUCCESS: {\n      const allCountries = action.payload.data.map((country) => {\n        if (country.capital === undefined) {\n          return {\n            commonName: country.name.common,\n            officialName: country.name.official,\n            capital: ['N/A'],\n            flag: country.flags.png,\n            population: country.population,\n            languages: country.languages,\n            borders: country.borders,\n            region: country.region,\n            favorite: false,\n          }\n        } else {\n          return {\n            commonName: country.name.common,\n            officialName: country.name.official,\n            capital: country.capital,\n            flag: country.flags.png,\n            population: country.population,\n            languages: country.languages,\n            borders: country.borders,\n            region: country.region,\n            favorite: false,\n          }\n        }\n      })\n\n      return {\n        ...state,\n        isLoading: false,\n        allCountries: allCountries,\n      }\n    }\n    case GET_COUNTRY_FAILURE: {\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload.errorMsg,\n      }\n    }\n    case ADD_FAVORITE_COUNTRY: {\n      // Deep clone allCountries state and update it\n      const clonedAllCountries = state.allCountries.map((country) => {\n        if (country.commonName === action.payload.countryName) {\n          country.favorite = !country.favorite\n        }\n        return country\n      })\n\n      // Deep clone favoriteCountries state and update it\n      const clonedFavCountries = state.favoriteCountries.map(\n        (country) => country\n      )\n      const addedCountry = clonedAllCountries.find(\n        (country) => country.commonName === action.payload.countryName\n      )\n      if (addedCountry) {\n        clonedFavCountries.push(addedCountry)\n      }\n\n      return {\n        ...state,\n        allCountries: clonedAllCountries,\n        favoriteCountries: clonedFavCountries,\n      }\n    }\n    case REMOVE_FAVORITE_COUNTRY: {\n      // Deep clone allCountries state and update it\n      const clonedAllCountries = state.allCountries.map((country) => {\n        if (country.commonName === action.payload.countryName) {\n          country.favorite = !country.favorite\n        }\n        return country\n      })\n\n      // Deep clone favoriteCountries state and update it\n      const clonedFavCountries = state.favoriteCountries.filter(\n        (country) => country.commonName !== action.payload.countryName\n      )\n\n      return {\n        ...state,\n        allCountries: clonedAllCountries,\n        favoriteCountries: clonedFavCountries,\n      }\n    }\n    default:\n      return state\n  }\n}\n","import { ModalState, TOGGLE_MODAL, ModalAction } from '../../types'\n\nexport default function modal(\n  state: ModalState = {\n    showModal: false,\n  },\n  action: ModalAction\n): ModalState {\n  switch (action.type) {\n    case TOGGLE_MODAL:\n      return {\n        showModal: !state.showModal,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport country from './country'\nimport modal from './modal'\n\nconst createRootReducer = () =>\n  combineReducers({\n    country,\n    modal,\n  })\n\nexport default createRootReducer\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { AppState } from '../types'\nimport createRootReducer from './reducers'\n\nconst initState: AppState = {\n  country: {\n    isLoading: true,\n    error: '',\n    allCountries: [],\n    favoriteCountries: [],\n  },\n  modal: {\n    showModal: false,\n  },\n}\n\nexport default function makeStore(initialState = initState) {\n  const middlewares = [thunk]\n  let composeEnhancers = compose\n\n  if (process.env.NODE_ENV === 'development') {\n    if ((window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n    }\n  }\n\n  const store = createStore(\n    createRootReducer(),\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares))\n  )\n\n  if ((module as any).hot) {\n    ;(module as any).hot.accept('./reducers', () => {\n      const nextReducer = require('./reducers').default\n      store.replaceReducer(nextReducer)\n    })\n  }\n\n  return store\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router } from 'react-router-dom'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport makeStore from './redux/store'\nimport './styles/_global.scss'\n\nconst store = makeStore()\n\nconst WithProvider = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n)\n\nReactDOM.render(<WithProvider />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}